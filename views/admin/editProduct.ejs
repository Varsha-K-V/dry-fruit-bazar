<%- include("../../views/partials/admin/header") %>


    <head>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
        <!-- Cropper.js JS -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>



        <style>
            .thumbnails-container {
                display: flex;
                overflow-x: auto;
            }

            .thumbnail {
                margin-right: 10px;
            }

            .input-upload {
                position: relative;
            }

            .error-message {
                color: red;
                display: block; /* Changed from none to block to ensure errors are visible */
            }

            .image-cropper {
                display: flex;
                align-items: center;
                margin-bottom: 20px;
                width: 300px;
                height: 200px;
            }

            .remove-icon {
                margin-left: 10px;
                cursor: pointer;
                color: red;
            }

            .error-message {
                color: red;
                font-size: 14px;
                margin-top: 5px;
            }

            .border-danger {
                border: 2px solid red !important;
            }
        </style>

    </head>
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <!-- Include SweetAlert2 in your head or before this form -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

<form id="editProductForm" method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data">
  <div class="mb-4">
    <label for="product_name" class="form-label">Product Name</label>
    <input type="text" name="productName" value="<%= product.productName %>" class="form-control border" id="product_name">
    <span id="productName-error" class="error-message"></span>
  </div>

  <div class="mb-4">
    <label for="description" class="form-label">Full Description</label>
    <textarea name="descriptionData" class="form-control border" rows="4" id="description"><%= product.description %></textarea>
    <span id="description-error" class="error-message"></span>
  </div>

  <div class="mb-4">
    <label for="category" class="form-label">Category</label>
    <select class="form-select border" name="category" id="category">
      <% for (let i = 0; i < cat.length; i++) { %>
        <option value="<%= cat[i].name %>" <% if (cat[i].name === product.category) { %> selected <% } %>><%= cat[i].name %></option>
      <% } %>
    </select>
    <span id="category-error" class="error-message"></span>
  </div>

  <div class="card mb-4">
    <div class="card-header">
      <h4>Product Images</h4>
    </div>
    <div class="card-body">
      <!-- Existing Images -->
      <% product.productImage.forEach((image, index) => { %>
        <div class="thumbnail" style="display:inline-block; margin-right:10px;">
          <img src="/uploads/productImage/<%= image %>" alt="Product Image" class="rounded" style="width: 50px; height: 60px;">
          <span class="remove-icon" style="cursor:pointer;" onclick="deleteSingleImage('<%= image %>', '<%= product._id %>')">&times;</span>
        </div>
      <% }); %>

      <!-- New Image Upload with Cropping -->
      <div id="newImageUpload" style="margin-top:20px;">
        <!-- Original Image Preview (shown immediately after file selection) -->
        <div id="originalPreview_new" style="display:none; margin-bottom:10px;">
          <img src="" id="originalImg_new" alt="Original Preview" style="max-width:300px; height:auto;">
        </div>

        <!-- File input for new image -->
        <label for="newImage" class="form-label">Upload New Image</label>
        <input class="form-control" type="file" name="newImage" id="newImage"
               accept="image/png, image/jpeg, image/jpg"
               onchange="viewImage(event, 'new')">
        <span id="image-error" class="error-message"></span>

        <!-- Cropping container (hidden by default) -->
        <div class="image-cropper d-flex flex-column align-items-center" id="cropperContainer_new"
             style="display:none; width:300px; margin-top:10px; margin-bottom:20px;">
          <img src="" id="croppedImg_new" alt="Cropped Preview" style="max-width:100%; height:auto; display:none;">
          <!-- Hidden input to store the cropped image's Base64 data -->
          <input type="hidden" name="croppedImageData_new" id="croppedImageData_new">
          <button type="button" id="saveButton_new" class="btn-sm btn-primary" style="margin-top:10px;" onclick="saveCroppedImage('new')">Save</button>
        </div>
      </div>
    </div>
  </div>

  <button class="btn btn-md rounded font-sm hover-up" type="submit">Update</button>
</form>



                    </div>
                </div>
            </div>
        </div>
    </section>

    <script>


        function deleteSingleImage(imageName, productId) {
            console.log(`Attempting to delete image: ${imageName}, Product ID: ${productId}`);
            $.ajax({
                url: "/admin/deleteImage",
                method: "POST",
                data: { imageNameToServer: imageName, productIdToServer: productId },
                success: (response) => {
                    console.log("Response from server:", response);
                    if (response.status) {
                        window.location.reload();
                    } else {
                        alert(response.message || "Failed to delete image.");
                    }
                },
                error: (xhr, status, error) => {
                    console.error("Error occurred:", status, error);
                    alert("Error occurred while deleting the image.");
                }
            });
        }


        function viewImage(event, id) {
  const input = event.target;
  if (input.files && input.files[0]) {
    const reader = new FileReader();
    reader.onload = function(e) {
      // For new images, show the original preview
      if (id === 'new') {
        const originalPreview = document.getElementById('originalPreview_new');
        const originalImg = document.getElementById('originalImg_new');
        if (originalPreview && originalImg) {
          originalImg.src = e.target.result;
          originalPreview.style.display = 'block';
        }
      }
      
      // Show the cropping container and set the image source for cropping
      const cropperContainer = document.getElementById(id === 'new' ? 'cropperContainer_new' : `cropperContainer${id}`);
      if (cropperContainer) {
        cropperContainer.style.display = 'flex';
      } else {
        console.error(`Element with id ${id === 'new' ? 'cropperContainer_new' : `cropperContainer${id}`} not found.`);
      }
      
      const croppedImg = document.getElementById(id === 'new' ? 'croppedImg_new' : `croppedImg${id}`);
      if (croppedImg) {
        croppedImg.src = e.target.result;
        croppedImg.style.display = 'block'; // Ensure the cropper image is visible
      } else {
        console.error(`Element with id ${id === 'new' ? 'croppedImg_new' : `croppedImg${id}`} not found.`);
      }
      
      // Initialize Cropper.js (destroy previous instance if any)
      if (window['cropper' + id]) {
        window['cropper' + id].destroy();
      }
      window['cropper' + id] = new Cropper(croppedImg, {
        aspectRatio: 1,
        viewMode: 1,
        guides: true,
        background: false,
        autoCropArea: 1,
        zoomable: true
      });
      console.log("Cropper instance for", id, ":", window['cropper' + id]);
    };
    reader.readAsDataURL(input.files[0]);
  }
}

function saveCroppedImage(id) {
  console.log("Save button clicked for image", id);
  
  // Retrieve the Cropper instance from the window object
  const cropper = window['cropper' + id];
  if (!cropper) {
    console.error('No cropper instance found for image', id);
    return;
  }
  
  // Get the cropped canvas from the Cropper
  const croppedCanvas = cropper.getCroppedCanvas();
  if (!croppedCanvas) {
    console.error('Cropped canvas not available for image', id);
    return;
  }
  
  // Convert the cropped canvas to a Base64 data URL (cropped image)
  const dataUrl = croppedCanvas.toDataURL('image/jpeg');
  console.log("Cropped data URL:", dataUrl);
  
  // Update the cropped image preview with the cropped data URL
  const croppedImg = document.getElementById(id === 'new' ? 'croppedImg_new' : `croppedImg${id}`);
  if (croppedImg) {
    croppedImg.src = dataUrl;
    croppedImg.style.display = 'block';
  } else {
    console.error(`Element with id ${id === 'new' ? 'croppedImg_new' : `croppedImg${id}`} not found.`);
  }
  
  // Destroy the Cropper instance to remove the cropping overlay
  cropper.destroy();
  
  // Ensure the cropping container remains visible
  const cropperContainer = document.getElementById(id === 'new' ? 'cropperContainer_new' : `cropperContainer${id}`);
  if (cropperContainer) {
    cropperContainer.style.display = 'block';
  } else {
    console.error(`Element with id ${id === 'new' ? 'cropperContainer_new' : `cropperContainer${id}`} not found.`);
  }
  
  // Save the Base64 string in the hidden input for form submission
  const hiddenInput = document.getElementById(id === 'new' ? 'croppedImageData_new' : `croppedImageData${id}`);
  if (hiddenInput) {
    hiddenInput.value = dataUrl;
    console.log('Hidden input updated with:', hiddenInput.value);
  } else {
    console.error('Hidden input not found for image', id);
  }
  
  // Optionally, clear the file input so that Multer doesn't process the original file
  const fileInput = document.getElementById(id === 'new' ? 'newImage' : `input${id}`);
  if (fileInput) {
    fileInput.value = '';
  } else {
    console.error(`File input element not found for id ${id}.`);
  }
}

// .......................................................................................

document.addEventListener("DOMContentLoaded", function() {
  document.getElementById('editProductForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    let isValid = true;

    const name = document.getElementById('product_name').value.trim();
    const description = document.getElementById('description').value.trim();
    const category = document.getElementById('category').value.trim();

    const nameError = document.getElementById('productName-error');
    const descriptionError = document.getElementById('description-error');
    const categoryError = document.getElementById('category-error');
    const imageError = document.getElementById('image-error');

    // Reset error messages
    nameError.textContent = "";
    descriptionError.textContent = "";
    categoryError.textContent = "";
    imageError.textContent = "";
    
    // Reset border classes
    document.getElementById('product_name').classList.remove('border-danger');
    document.getElementById('description').classList.remove('border-danger');
    document.getElementById('category').classList.remove('border-danger');
    document.getElementById('newImage').classList.remove('border-danger');

    if (name === "") {
      nameError.textContent = "Product name is required";
      document.getElementById('product_name').classList.add('border-danger');
      isValid = false;
    }

    if (description === "") {
      descriptionError.textContent = "Description is required";
      document.getElementById('description').classList.add('border-danger');
      isValid = false;
    }

    if (category === "") {
      categoryError.textContent = "Please select a category";
      document.getElementById('category').classList.add('border-danger');
      isValid = false;
    }

    // Validate image input (if a new image is uploaded)
    const imageInput = document.getElementById('newImage');
    if (imageInput.files.length > 0) {
      const allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
      if (!allowedExtensions.exec(imageInput.value)) {
        imageError.textContent = "Only JPG, JPEG, and PNG formats are allowed";
        imageInput.classList.add('border-danger');
        isValid = false;
      }
    }

    if (!isValid) {
      return;
    }

    // Submit the form using AJAX (fetch API)
    const formData = new FormData(this);

    try {
      const response = await fetch(this.action, {
        method: "POST",
        body: formData
      });

      const data = await response.json();

      if (data.success) {
        Swal.fire({
          title: "Success!",
          text: data.message || "Product updated successfully",
          icon: "success",
          confirmButtonText: "OK"
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = "/admin/products";
          }
        });
      } else {
        // Handle field-specific errors from backend
        if (data.field && data.message) {
          const errorElement = document.getElementById(`${data.field}-error`);
          if (errorElement) {
            errorElement.textContent = data.message;
            const inputElement = document.getElementById(data.field === 'productName' ? 'product_name' : data.field);
            if (inputElement) {
              inputElement.classList.add('border-danger');
            }
          }
        } else {
          throw new Error(data.message || "Failed to update product");
        }
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire({
        title: "Error",
        text: error.message || "Something went wrong",
        icon: "error",
        confirmButtonText: "OK"
      });
    }
  });
});

    </script>
    <%- include("../../views/partials/admin/footer") %>



<%- include("../../views/partials/admin/header") %>
<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
  <style>
    .col-md-3 {
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 10px;
      margin: 10px;
    }

    .form-label {
      margin-bottom: 8px;
    }

    .form-control {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }

    .d-grid {
      margin-top: 20px;
    }

    .btn-primary {
      background-color: #007bff;
      color: #fff;
      border: 1px solid #007bff;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
    }

    .btn-primary:hover {
      background-color: #0056b3;
      border-color: #0056b3;
    }

    .pagination-container {
      text-align: center;
    }

    .pagination {
      display: inline-block;
    }

    .pagination a,
    .pagination .current-page {
      display: inline-block;
      padding: 5px 10px;
      margin: 0 2px;
      border: 1px solid #ddd;
      text-decoration: none;
      color: #333;
    }

    .pagination a:hover {
      background-color: #f5f5f5;
    }

    .error-message {
      color: red;
    }
  </style>
</head>
<body>
  <section class="content-main">
    <div class="content-header">
      <div>
        <h2 class="content-title card-title">Category</h2>
      </div>
    </div>
    <header class="card-header text-center mb-20">
      <form action="/admin/category/" method="get" class="d-inline">
        <div class="input-group input-group-sm border border-1 border-grey rounded-pill" style="width: 500px; margin-left: 230px">
          <input type="text" class="form-control border-0 rounded-pill mt-3" placeholder="Search categories" name="search"/>
          <button class="btn" type="submit">Search</button>
        </div>
      </form>
    </header>

   <div class="container mt-4">
  <div class="row">
    <!-- Add Category Form -->
    <div class="col-md-4">
      <div class="card shadow-sm mb-4">
        <div class="card-body">
          <h5 class="card-title mb-3">Add Category</h5>
          <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
            <div class="mb-3">
              <label for="product_name" class="form-label">Name</label>
              <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name" required />
              <div id="name-error" class="error-message"></div>
            </div>
            <div class="mb-3">
              <label for="descriptionId" class="form-label">Description</label>
              <textarea name="description" placeholder="Type here" class="form-control" id="descriptionId" required></textarea>
              <div id="description-error" class="error-message"></div>
            </div>
            <div class="d-grid">
              <button class="btn btn-primary" type="submit">
                Create Category
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Categories Table -->
    <div class="col-md-8">
      <div class="card shadow-sm mb-4">
        <div class="card-body">
          <h5 class="card-title mb-3">Manage Categories</h5>
          <div class="table-responsive">
            <table class="table table-hover align-middle">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Description</th>
                  <th>Offer Percentage</th>
                  <th>Offer</th>
                  <th>List/Unlist</th>
                  <th>Status</th>
                  <th>Edit</th>
                </tr>
              </thead>
              <tbody>
                <% if (cat && cat.length > 0) { %>
                  <% cat.reverse().forEach((category) => { %>
                    <tr>
                      <td><%= category.name %></td>
                      <td><%= category.description %></td>
                      <td>
                        <%if(category.categoryOffer){%>
                          <%=category.categoryOffer%>
                          <%}else{%>
                            0%
                            <%}%>

                      </td>
                      <td>
                        <div class="btn-group">
                          <%if(category.categoryOffer===0){%>
                          <button class="btn btn-info btn-sm" style="width: 100px">
                            <a href="#" class="text-white text-decoration-none" onclick="addOffer('<%=category._id%>')">Add Offer</a>
                          </button>
                          <%}else{%>
                          <button class="btn btn-info btn-sm" style="width: 100px">
                            <a href="#" class="text-white text-decoration-none" onclick="removeOffer('<%=category._id%>')">Remove</a>
                          </button>
                          <%}%>
                        </div>
                      </td>
                      <td>
                        <% if (category.isListed) { %>
                          <button id="category-btn-<%= category._id %>" class="btn btn-danger btn-sm"
                                  onclick="toggleCategoryStatus('<%= category._id %>', 'true')">
                            Unlist
                          </button>
                        <% } else { %>
                          <button id="category-btn-<%= category._id %>" class="btn btn-success btn-sm"
                                  onclick="toggleCategoryStatus('<%= category._id %>', 'false')">
                            List
                          </button>
                        <% } %>
                      </td>
                      <td>
                        <span id="category-status-<%= category._id %>" 
                              class="badge bg-<%= category.isListed ? 'success' : 'danger' %>">
                          <%= category.isListed ? 'Listed' : 'Unlisted' %>
                        </span>
                      </td>
                      <td>
                        <a href="/admin/editCategory?id=<%= category._id %>" class="btn btn-info btn-sm text-white">
                          Edit
                        </a>
                      </td>
                    </tr>
                  <% }) %>
                <% } else { %>
                  <tr>
                    <td colspan="7" class="text-center">No categories found.</td>
                  </tr>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

    
    <div class="pagination-container">
        <% if (currentPage > 1) { %>
        <a href="?page=<%= currentPage - 1 %>">&laquo; Previous</a>
        <% } %> 
        <% for (let i = 1; i <= totalPages; i++) { %> 
            <% if (i === currentPage) { %>
                <span class="current-page"><%= i %></span>
            <% } else { %>
                <a href="?page=<%= i %>"><%= i %></a>
            <% } %> 
        <% } %>
        <% if (currentPage < totalPages) { %>
        <a href="?page=<%= currentPage + 1 %>">Next &raquo;</a>
        <% } %>
    </div>
  
  </section>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script>

async function handleAddCategory(name, description) {
    try {
        const response = await fetch('/admin/addCategory', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name: name, description: description }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Something went wrong');
        }

        const data = await response.json();

        await Swal.fire({
            icon: 'success',
            title: 'Category Added',
            text: 'The category was added successfully!',
        });

        location.reload(); 
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message,
        });
    }
}

function handleFormSubmit(event) {
    event.preventDefault();

    
    if (!validateForm()) {
        return; 
    }


    const categoryId = new URLSearchParams(window.location.search).get('id');

    
    const name = document.querySelector('input[name="name"]').value.trim();
    const description = document.getElementById("descriptionId").value.trim();

    if (categoryId) {
        
        handleEditCategory(categoryId, name, description);
    } else {

        handleAddCategory(name, description);
    }
}

  
  function validateForm() {
      clearErrorMessages(); 
  
      const name = document.getElementsByName("name")[0].value.trim();
      const description = document.getElementById("descriptionId").value.trim();
      let isValid = true;
  
      if (name === "") {
          displayErrorMessage("name-error", "Please enter a category name.");
          isValid = false;
      } else if (!/^[a-zA-Z\s]+$/.test(name)) {
          displayErrorMessage("name-error", "Category name should contain only alphabetic characters.");
          isValid = false;
      }
  
      if (description === "") {
          displayErrorMessage("description-error", "Please enter a description.");
          isValid = false;
      }
  
      return isValid;
  }
  
  function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
  }
  
  function clearErrorMessages() {
      const errorElements = document.getElementsByClassName("error-message");
      Array.from(errorElements).forEach((element) => {
          element.innerText = "";
          element.style.display = "none";
      });
  }


  function toggleCategoryStatus(categoryId, isListed) {
    isListed = isListed === "true"; 
    let action = isListed ? "unlist" : "list";
    let newStatus = isListed ? "Unlisted" : "Listed";
    let newButtonClass = isListed ? "btn-success" : "btn-danger";
    let newButtonText = isListed ? "List" : "Unlist";
    
    Swal.fire({
        title: `Are you sure you want to ${action} this category?`,
        text: "You can change it later if needed.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: `Yes, ${action} it!`
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/${action}Category?id=${categoryId}`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" }
            })
            .then(response => response.json())  
            .then(data => {
                if (data.success) {
                    Swal.fire(`${newStatus}!`, `The category has been ${action}ed.`, "success");

                 
                    let button = document.getElementById(`category-btn-${categoryId}`);
                    let statusBadge = document.getElementById(`category-status-${categoryId}`);

                    button.setAttribute("onclick", `toggleCategoryStatus('${categoryId}', ${!isListed})`);
                    button.className = `btn ${newButtonClass}`;
                    button.innerHTML = `<span class="text-white">${newButtonText}</span>`;

                    statusBadge.className = `badge rounded-pill alert-${isListed ? "danger" : "success"}`;
                    statusBadge.innerText = newStatus;
                } else {
                    Swal.fire("Error!", "Something went wrong.", "error");
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire("Error!", "Something went wrong.", "error");
            });
        }
    });
}


async function addOffer(categoryId){
  const {value:amount} = await Swal.fire({
    title:"Offer in Percentage",
    input:"number",
    inputLabel:"Percentage",
    inputPlaceholder:"%",
  });

  if(amount){
    try {
      const response = await fetch("/admin/addCategoryOffer",{
        method:"POST",
        headers:{
          'content-type':"application/json",
        },
        body:JSON.stringify({
          percentage:amount,
          categoryId:categoryId,
        }),
      });
      const data = await response.json();
      if(response.ok && data.status === true){
        Swal.fire(
          "Offer added",
          "The offer has been added",
          "success"
        ).then(()=>{
          location.reload();
        })
      }else{
        Swal.fire("Failed",data.message || "Adding offer failed","error");
      }
    } catch (error) {
      Swal.fire(
        "Error",
        "An error occured while adding the offer",
        "error"
      );
      console.log("Error adding offer",error);
    }
  }
}


async function removeOffer(categoryId){
  try {
    const response = await fetch("/admin/removeCategoryOffer",{
      method :"POST",
      headers:{
        "content-type":"application/json",
      },
      body: JSON.stringify({
        categoryId:categoryId,
      })
    })

    const data = await response.json();

    if(response.ok && data.status === true){
      Swal.fire(
        "Offer removed",
        "The offer has been removed",
        "success"
      ).then(()=>{
        location.reload();
      });
    }else{
      Swal.fire("Failed",data.message || "Removing offer failed","error");
    }

  } catch (error) {
    Swal.fire(
      "Error",
      "An error occured while removing the offer",
      "error"
    );
    console.error("Error removing offer",error);
  }
}


  </script>
  



<%- include("../../views/partials/admin/footer") %>
